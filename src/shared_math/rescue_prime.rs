use crate::shared_math::b_field_element::BFieldElement;
use crate::shared_math::stark::BoundaryConstraint;
use crate::shared_math::traits::IdentityValues;

use super::mpolynomial::MPolynomial;
use super::polynomial::Polynomial;
use super::traits::{GetGeneratorDomain, ModPowU64};

// TODO: Make this work for XFieldElement via trait.
#[derive(Debug, Clone)]
pub struct RescuePrime {
    pub m: usize,
    // rate: usize,
    // capacity: usize,
    pub steps_count: usize,
    alpha: u64,
    alpha_inv: u64,
    mds: Vec<Vec<BFieldElement>>,
    mds_inv: Vec<Vec<BFieldElement>>,
    round_constants: Vec<BFieldElement>,
}

impl RescuePrime {
    pub fn after_tutorial() -> Self {
        let mds_u128: Vec<Vec<u128>> = vec![
            vec![
                5910257123858819639,
                3449115226714951713,
                16770055338049327985,
                610399731775780810,
                7363016345531076300,
                16174724756564259629,
                8736587794472183152,
                12699016954477470956,
                13948112026909862966,
                18015813124076612987,
                9568929147539067610,
                14859461777592116402,
                18169364738825153183,
                18221568702798258352,
                1524268296724555606,
                5538821761600,
            ],
            vec![
                1649528676200182784,
                336497118937017052,
                15805000027048028625,
                15709375513998678646,
                14837031240173858084,
                11366298206428370494,
                15698532768527519720,
                5911577595727321095,
                16676030327621016157,
                16537624251746851423,
                13325141695736654367,
                9337952653454313447,
                9090375522091353302,
                5605636660979522224,
                6357222834896114791,
                7776871531164456679,
            ],
            vec![
                8264739868177574620,
                12732288338686680125,
                13022293791945187811,
                17403057736098613442,
                2871266924987061743,
                13286707530570640459,
                9229362695439112266,
                815317759014579856,
                7447771153889267897,
                2209002535000750347,
                3280506473249596174,
                13756142018694965622,
                10518080861296830621,
                16578355848983066277,
                12732532221704648123,
                3426526797578099186,
            ],
            vec![
                8563516248221808333,
                13079317959606236131,
                15645458946300428515,
                9958819147895829140,
                13028053188247480206,
                6789511720078828478,
                6583246594815170294,
                4423695887326249884,
                9751139665897711642,
                10039202025292797758,
                12208726994829996150,
                6238795140281096003,
                9113696057226188857,
                9898705245385052191,
                4213712701625520075,
                8038355032286280912,
            ],
            vec![
                426685147605824917,
                7673465577918025498,
                8452867379070564008,
                10827610229277395180,
                16155539332955658546,
                1575428636717115288,
                8765972548498757598,
                8405996249707890526,
                14855028677418679455,
                17878170012428694685,
                16572621079016066883,
                5311046098447994501,
                10635376800783355348,
                14205668690430323921,
                1181422971831412672,
                4651053123208915543,
            ],
            vec![
                12465667489477238576,
                7300129031676503132,
                13458544786180633209,
                8946801771555977477,
                14203890406114400141,
                8219081892380458635,
                6035067543134909245,
                15140374581570897616,
                4514006299509426029,
                16757530089801321524,
                13202061911440346802,
                11227558237427129334,
                315998614524336401,
                11280705904396606227,
                5798516367202621128,
                17154761698338453414,
            ],
            vec![
                13574436947400004837,
                3126509266905053998,
                10740979484255925394,
                9273322683773825324,
                15349096509718845737,
                14694022445619674948,
                8733857890739087596,
                3198488337424282101,
                9521016570828679381,
                11267736037298472148,
                14825280481028844943,
                1326588754335738002,
                6200834522767914499,
                1070210996042416038,
                9140190343656907671,
                15531381283521001952,
            ],
            vec![
                253143295675927354,
                11977331414401291539,
                13941376566367813256,
                469904915148256197,
                10873951860155749104,
                3939719938926157877,
                2271392376641547055,
                4725974756185387075,
                14827835543640648161,
                17663273767033351157,
                12440960700789890843,
                16589620022628590428,
                12838889473653138505,
                11170336581460183657,
                7583333056198317221,
                6006908286410425140,
            ],
            vec![
                15648567098514276013,
                188901633101859949,
                12256163716419861419,
                17319784688409668747,
                9648971065289440425,
                11370683735445551679,
                11265203235776280908,
                1737672785338087677,
                5225587291780939578,
                4739055740469849012,
                1212344601223444182,
                12958616893209019599,
                7922060480554370635,
                14661420107595710445,
                11744359917257111592,
                9674559564931202709,
            ],
            vec![
                8326110231976411065,
                16856751238353701757,
                7515652322254196544,
                2062531989536141174,
                3875321171362100965,
                1164854003752487518,
                3997098993859160292,
                4074090397542250057,
                3050858158567944540,
                4568245569065883863,
                14559440781022773799,
                5401845794552358815,
                6544584366002554176,
                2511522072283652847,
                9759884967674698659,
                16411672358681189856,
            ],
            vec![
                11392578809073737776,
                8013631514034873271,
                11439549174997471674,
                6373021446442411366,
                12491600135569477757,
                1017093281401495736,
                663547836518863091,
                16157302719777897692,
                11208801522915446640,
                10058178191286215107,
                5521712058210208094,
                3611681474253815005,
                4864578569041337696,
                12270319000993569289,
                7347066511426336318,
                6696546239958933736,
            ],
            vec![
                3335469193383486908,
                12719366334180058014,
                14123019207894489639,
                11418186023060178542,
                2042199956854124583,
                17539253100488345226,
                16240833881391672847,
                11712520063241304909,
                6456900719511754234,
                1819022137223501306,
                7371152900053879920,
                6521878675261223812,
                2050999666988944811,
                8262038465464898064,
                13303819303390508091,
                12657292926928303663,
            ],
            vec![
                8794128680724662595,
                4068577832515945116,
                758247715040138478,
                5600369601992438532,
                3369463178350382224,
                13763645328734311418,
                9685701761982837416,
                2711119809520557835,
                11680482056777716424,
                10958223503056770518,
                4168390070510137163,
                10823375744683484459,
                5613197991565754677,
                11781942063118564684,
                9352512500813609723,
                15997830646514778986,
            ],
            vec![
                7407352006524266457,
                15312663387608602775,
                3026364159907661789,
                5698531403379362946,
                2544271242593770624,
                13104502948897878458,
                7840062700088318710,
                6028743588538970215,
                6144415809411296980,
                468368941216390216,
                3638618405705274008,
                11105401941482704573,
                1850274872877725129,
                1011155312563349004,
                3234620948537841909,
                3818372677739507813,
            ],
            vec![
                4863130691592118581,
                8942166964590283171,
                3639677194051371072,
                15477372418124081864,
                10322228711752830209,
                9139111778956611066,
                202171733050704358,
                11982413146686512577,
                11001000478006340870,
                5491471715020327065,
                6969114856449768266,
                11088492421847219924,
                12913509272810999025,
                17366506887360149369,
                7036328554328346102,
                11139255730689011050,
            ],
            vec![
                2844974929907956457,
                6488525141985913483,
                2860098796699131680,
                10366343151884073105,
                844875652557703984,
                1053177270393416978,
                5189466196833763142,
                1024738234713107670,
                8846741799369572841,
                14490406830213564822,
                10577371742628912722,
                3276210642025060502,
                2605621719516949928,
                5417148926702080639,
                11100652475866543814,
                5247366835775169839,
            ],
        ];
        let mds: Vec<Vec<BFieldElement>> = mds_u128
            .iter()
            .map(|mds| mds.iter().map(|&md| BFieldElement::new(md)).collect())
            .collect();

        let mds_inv: Vec<Vec<BFieldElement>> = vec![]; // TODO

        //     vec![
        //         PrimeFieldElementBig::new(
        //             210387253332845851216830350818816760948u128.into(),
        //             field,
        //         ),
        //         PrimeFieldElementBig::new(60110643809384528919094385948233360270u128.into(), field),
        //     ],
        //     vec![
        //         PrimeFieldElementBig::new(90165965714076793378641578922350040407u128.into(), field),
        //         PrimeFieldElementBig::new(
        //             180331931428153586757283157844700080811u128.into(),
        //             field,
        //         ),
        //     ],
        // ];

        // Each round has two round constants: `fst_rc` and `snd_rc`.
        // `fst_rc` values are indexed in the below array as:
        // `2 * round_number * register_counter + register_index`
        // `snd_rc` values are indexed in the below array as:
        // `2 * round_number * register_counter + register_index`
        let round_constants_u128: Vec<u128> = vec![
            15139912583685767368,
            8372387753867525709,
            2183680717104184380,
            3244606960098905893,
            3147881977364597901,
            9452780775072264938,
            1082537058754139762,
            10970853375448447283,
            3062104324741241281,
            18009675040823690122,
            9709134112189744652,
            15857062738397365943,
            5016225506033072343,
            5216859395468346115,
            6462263614532073214,
            1493656999465165663,
            828768000476271392,
            262568612853428171,
            10113927829938360011,
            3228404466757125020,
            7320852123907649631,
            13627426656786462355,
            7964883404857794874,
            1407934150297697997,
            17336604982330804394,
            17906014506034551057,
            4632709206831589562,
            12999797106063314512,
            17162978498471467904,
            6827540927719713380,
            4753504633679017533,
            17716852809995758525,
            8549423660797843647,
            2362390356169006813,
            16716828864075537528,
            2740683348482332949,
            7756193835844677826,
            17543799665801483121,
            15002804793384601632,
            7902645524886711764,
            15165733099428544473,
            4077635361197762831,
            15132376188215154091,
            10741861618481937993,
            13707397012333257757,
            14226034480467186519,
            18245513484961172378,
            13273670281248631122,
            18251304196568320201,
            18190580491784411188,
            6118572220412064319,
            5630770511111509423,
            7970516069264861936,
            13449271048822160788,
            6851697376735269367,
            17987627018199535376,
            5294172762355915266,
            13844513406523115704,
            14597636171777994036,
            6061614115452481739,
            8186070796010445225,
            2327693164544063482,
            855935718254855095,
            10009207201287677622,
            10381177680823887718,
            18166133947715927863,
            17760506907335165396,
            3370764898316519938,
            5201580129905804035,
            1620223121525450629,
            14461318317868382163,
            1250929940922089768,
            13370612866774614255,
            7175470036866504098,
            16421684582717699126,
            16644320598987600726,
            17802798266780789487,
            6974241949143442442,
            17591712720223212489,
            16201733676622149735,
            286099893890784288,
            8057298197517276497,
            6444512502860040579,
            8347461167435943315,
            17352444114675313421,
            13535064425127211380,
            4772591666336791434,
            427985333074531866,
            14141791479819390154,
            7028809244427084468,
            9426904145082569174,
            6166111020063614179,
            8951223707117953234,
            3431064000345231130,
            1944155315841337325,
            6285600810995398496,
            16897111123465175857,
            4660909896474179791,
            18192626343736320364,
            5057838432340191471,
            14014302776583938723,
            9925254923879301551,
            6829435345780265556,
            8968794115294201104,
            17778545491689490446,
            18017797995365371861,
            18060766500386119579,
            12896732587303423715,
            4187616244444972880,
            10797712368247465599,
            5551515461716974377,
            5987237400880775150,
            8306936493309794552,
            10555482202024602033,
            16045656883318709119,
            14224667772707921698,
            7464515010550790466,
            14683637456755672385,
            8606694398702844028,
            12783325878688361611,
            10135605311909694521,
            6036681888442161456,
            13502595716772524386,
            17837288544072949135,
            16970790481274575856,
            12771951327386638665,
            7953144665513487435,
            10232601596097265370,
            7142562723872426447,
            7061326483481627814,
            2700322576799317485,
            6623246769381195291,
            16825539912038364772,
            17345255259493544461,
            3655344217194071236,
            4906781818047525714,
            14897453143374918047,
            12697105275305687091,
            6365510487307614865,
            16389921370395602280,
            6184292348425681997,
            1625734039805583227,
            7926303851971506844,
            6764450482313517598,
            12861725371095466098,
            1457318443242363431,
            6401144276852156944,
            11758577537140385015,
            7035279949079298611,
            17490109387633149109,
            9028549762556146425,
            14629064429955990677,
            7345978731773547933,
            2380447650891770049,
            13946626261179506153,
            14112757565552107369,
            18323048004349754740,
            3761840715850313303,
            2423761811055022202,
            4043073367058340954,
            4714747831891079272,
            9903324717460101691,
            16489681373737990564,
            12205142203164019145,
            7650721966187356479,
            13176636867741415622,
            8725940740195977648,
            7850051922002287223,
            7013216436240322065,
            7521500899942431357,
            17948709915499568560,
            12709968715340313663,
            12864870176028239567,
            13835492971050856940,
            14117813659377608536,
            17930389253653738705,
            16665999642411270287,
            8522764273244228281,
            17022385114623716012,
            17792533099449144220,
            9666141708192493561,
            4101243295111900354,
            11110149680511328320,
            15833373900081216881,
            2858902809543644288,
            15185937040593697757,
            1229742010402781808,
            12488915253710643809,
            14449445461821352645,
            11702325210632962260,
            7390229042372607295,
            13724660230648496560,
            16370078900053649525,
            6897898366117786971,
            12564585209779431146,
            15916465850680923114,
            3497319829092809455,
            3681935191724738445,
            17269401177087593182,
            14149218837807091766,
            13453529877505970461,
            15298165362714239682,
            14728462634044980354,
            14409721890326796259,
            17353894810846356075,
            16857127813837277773,
            11187357872695367332,
            15533140707195072093,
            1163405869960896591,
            15296392010875874377,
            17872716265685676772,
            14706935000063347212,
            14502717840925123585,
            1458466805797611569,
            2849079512899132391,
            14109081278228167673,
            8933669600131241369,
            8173386480957668450,
            15252826729106121549,
            10128993114764423519,
            11364771171604097376,
            14762095736262922188,
            13319725258546020263,
            16948750294723703018,
            10039494505766092885,
            14730563960989205668,
            16314543682302146762,
            13412588491336542421,
            5973689466852663000,
            673906515894578274,
            4039316712345686736,
            2031308080490921066,
            2907338798762025874,
            12316517814797934964,
            9307548410347506674,
            9351070955954520832,
            5794230072435402060,
            7922269617708021679,
            9708384153023840180,
            16472577099676318887,
            5244055413069805590,
            18123735486382626662,
            6519538476295982160,
            14228372996780660309,
            7960505044283116493,
            13993750470080027634,
            11478414004339098168,
            5009409638864158506,
            15807366605352652129,
            10685686439628572285,
            6800403862825412390,
            13138657193944784618,
            6448410590255081786,
            4381763274661386195,
            3646572817684127401,
            2916928929409428212,
        ];
        let round_constants: Vec<BFieldElement> = round_constants_u128
            .iter()
            .map(|&c| BFieldElement::new(c))
            .collect();

        Self {
            m: 16,
            // rate: 1,
            // capacity: 1,
            steps_count: 7,
            alpha: 7,
            alpha_inv: 10540996611094048183,
            mds,
            mds_inv,
            round_constants,
        }
    }

    fn hash_round(
        &self,
        input_state: Vec<BFieldElement>,
        round_number: usize,
    ) -> Vec<BFieldElement> {
        // S-box
        let mut state: Vec<BFieldElement> = input_state
            .iter()
            .map(|&v| v.mod_pow_u64(self.alpha))
            .collect();

        // Matrix
        let mut temp: Vec<BFieldElement> = vec![input_state[0].ring_zero(); self.m];
        #[allow(clippy::needless_range_loop)]
        for i in 0..self.m {
            for j in 0..self.m {
                temp[i] = temp[i].clone() + self.mds[i][j].clone() * state[j].clone();
            }
        }

        // Add rounding constants
        state = temp
            .into_iter()
            .enumerate()
            .map(|(i, val)| val + self.round_constants[2 * round_number * self.m + i].clone())
            .collect();

        // Backward half-round
        // S-box
        state = state
            .iter()
            .map(|v| v.mod_pow(self.alpha_inv.clone()))
            .collect();

        // Matrix
        temp = vec![input_state[0].ring_zero(); self.m];
        #[allow(clippy::needless_range_loop)]
        for i in 0..self.m {
            for j in 0..self.m {
                temp[i] = temp[i].clone() + self.mds[i][j].clone() * state[j].clone();
            }
        }

        // Add rounding constants
        state = temp
            .into_iter()
            .enumerate()
            .map(|(i, val)| {
                val + self.round_constants[2 * round_number * self.m + self.m + i].clone()
            })
            .collect();

        state
    }

    /// Return the Rescue-Prime hash value
    pub fn hash(&self, input: &BFieldElement) -> BFieldElement {
        let mut state = vec![input.ring_zero(); self.m];
        state[0] = input.to_owned();

        state = (0..self.steps_count).fold(state, |state, i| self.hash_round(state, i));

        state[0].clone()
    }

    pub fn trace(&self, input: &BFieldElement) -> Vec<Vec<BFieldElement>> {
        let mut trace: Vec<Vec<BFieldElement>> = vec![];
        let mut state = vec![input.ring_zero(); self.m];
        state[0] = input.to_owned();
        trace.push(state.clone());

        // It could be cool to write this with `scan` instead of a for-loop, but I couldn't get that to work
        for i in 0..self.steps_count {
            let next_state = self.hash_round(state, i);
            trace.push(next_state.clone());
            state = next_state;
        }

        trace
    }

    pub fn eval_and_trace(
        &self,
        input: &BFieldElement,
    ) -> (BFieldElement, Vec<Vec<BFieldElement>>) {
        let trace = self.trace(input);
        let output = trace.last().unwrap()[0].clone();

        (output, trace)
    }

    /// Return a pair of a list of polynomials, first element in the pair,
    /// (first_round_constants[register], second_round_constants[register])
    pub fn get_round_constant_polynomials(
        &self,
        omicron: BFieldElement,
    ) -> (
        Vec<MPolynomial<BFieldElement>>,
        Vec<MPolynomial<BFieldElement>>,
    ) {
        let domain = omicron.get_generator_domain();
        let mut first_round_constants: Vec<MPolynomial<BFieldElement>> = vec![];
        for i in 0..self.m {
            let values: Vec<BFieldElement> = self
                .round_constants
                .clone()
                .into_iter()
                .skip(i)
                .step_by(2 * self.m)
                .collect();
            // let coefficients = intt(&values, omicron);
            let points: Vec<(BFieldElement, BFieldElement)> = domain
                .clone()
                .iter()
                .zip(values.iter())
                .map(|(x, y)| (x.to_owned(), y.to_owned()))
                .collect();
            let coefficients = Polynomial::slow_lagrange_interpolation(&points).coefficients;
            first_round_constants.push(MPolynomial::lift(Polynomial { coefficients }, 0));
        }

        let mut second_round_constants: Vec<MPolynomial<BFieldElement>> = vec![];
        for i in 0..self.m {
            let values: Vec<BFieldElement> = self
                .round_constants
                .clone()
                .into_iter()
                .skip(i + self.m)
                .step_by(2 * self.m)
                .collect();
            // let coefficients = intt(&values, omicron);
            let points: Vec<(BFieldElement, BFieldElement)> = domain
                .clone()
                .iter()
                .zip(values.iter())
                .map(|(x, y)| (x.to_owned(), y.to_owned()))
                .collect();
            let coefficients = Polynomial::slow_lagrange_interpolation(&points).coefficients;
            second_round_constants.push(MPolynomial::lift(Polynomial { coefficients }, 0));
        }

        (first_round_constants, second_round_constants)
    }

    // Returns the multivariate polynomial which takes the triplet (domain, trace, next_trace) and
    // returns composition polynomial, which is the evaluation of the air for a specific trace.
    // AIR: [F_p x F_p^m x F_p^m] --> F_p^m
    // The composition polynomial values are low-degree polynomial combinations
    // (as opposed to linear combinations) of the values:
    // `domain` (scalar), `trace` (vector), `next_trace` (vector).
    pub fn get_air_constraints(&self, omicron: BFieldElement) -> Vec<MPolynomial<BFieldElement>> {
        let (first_step_constants, second_step_constants) =
            self.get_round_constant_polynomials(omicron);

        let variables = MPolynomial::variables(1 + 2 * self.m, omicron.ring_one());
        let previous_state = &variables[1..(self.m + 1)];
        let next_state = &variables[(self.m + 1)..(2 * self.m + 1)];
        let one = omicron.ring_one();
        let mut air: Vec<MPolynomial<BFieldElement>> = vec![];

        // TODO: Consider refactoring MPolynomial<BFieldElement>
        // ::mod_pow(exp: BigInt, one: BFieldElement) into
        // ::mod_pow_u64(exp: u64)
        #[allow(clippy::needless_range_loop)]
        for i in 0..self.m {
            let mut lhs = MPolynomial::from_constant(omicron.ring_zero());
            for k in 0..self.m {
                lhs = lhs
                    + previous_state[k]
                        .mod_pow(self.alpha.clone().into(), one.clone())
                        .scalar_mul(self.mds[i][k].clone());
            }
            lhs = lhs + first_step_constants[i].clone();

            let mut rhs = MPolynomial::from_constant(omicron.ring_zero());
            for k in 0..self.m {
                rhs = rhs
                    + (next_state[k].clone() - second_step_constants[k].clone())
                        .scalar_mul(self.mds_inv[i][k].clone());
            }
            rhs = rhs.mod_pow(self.alpha.clone().into(), one.clone());

            air.push(lhs - rhs);
        }

        air
    }

    pub fn get_boundary_constraints(
        &self,
        output_element: BFieldElement,
    ) -> Vec<BoundaryConstraint> {
        vec![
            BoundaryConstraint {
                cycle: 0,
                register: 1,
                value: output_element.ring_zero(),
            },
            BoundaryConstraint {
                cycle: self.steps_count,
                register: 0,
                value: output_element.to_owned(),
            },
        ]
    }
}
