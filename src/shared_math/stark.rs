use crate::shared_math::fri::ValidationError;
use crate::shared_math::traits::{
    CyclicGroupGenerator, FieldBatchInversion, IdentityValues, ModPowU32, PrimeFieldElement,
};
use crate::util_types::merkle_tree::{MerkleTree, PartialAuthenticationPath};
use crate::util_types::proof_stream::ProofStream;
use crate::utils::{blake3_digest, get_index_from_bytes};
use std::error::Error;

use super::b_field_element::BFieldElement;
use super::other::log_2_ceil;
use super::polynomial::Polynomial;
use super::x_field_fri::Fri;
use crate::shared_math::ntt::intt;

// Module for performing FRI on XFieldElement
// #[derive(Debug)]
// pub struct Fri<F: PrimeFieldElement> {
//     offset: F::Elem,                 // Offset for subgroup generator
//     omega: F::Elem,                  // Generator of the expanded domain
//     domain_length: usize,            // Size of domain generated by omega
//     expansion_factor: usize,         // = domain_length / trace_length
//     colinearity_checks_count: usize, //
// }

#[derive(Clone, Debug)]
pub struct Stark<F: PrimeFieldElement, G: PrimeFieldElement> {
    expansion_factor: u32,
    fri: Fri<G>,
    field_generator: F,
    randomizer_count: u32,
    omega: F,
    pub omicron: F, // omicron = omega^expansion_factor
    omicron_domain: Vec<F>,
    omicron_domain_length: u32,
    original_trace_length: u32,
    randomized_trace_length: u32,
    register_count: u32,
}

impl<F: PrimeFieldElement, G: PrimeFieldElement> Stark<F, G> {
    pub fn new(
        expansion_factor: u32,
        colinearity_check_count: u32,
        register_count: u32,
        cycle_count: u32,
        generator: F,
    ) -> Self {
        let num_randomizers = 4 * colinearity_check_count;
        let original_trace_length = cycle_count;
        let randomized_trace_length = original_trace_length + num_randomizers;
    }
}

// TODO: Make this work for XFieldElement via trait.
#[derive(Clone, Debug)]
pub struct BoundaryConstraint {
    pub cycle: usize,
    pub register: usize,
    pub value: BFieldElement,
}
